<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE syntax SYSTEM "syntax.dtd">
<syntax>

    <head>
        <!-- The definitions title -->
        <name>Parser</name>
        <!-- Valid Characters for Variables -->
        <charsintokens><![CDATA[_0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ]]></charsintokens>
        <!-- <charsdelimitingtokens></charsdelimitingtokens> -->
    </head>

    <states>
    
       <default id="Base" scope="meta.default">

            <import mode="XML" keywords-only="yes"/>

            <keywords id="P3 Types" useforautocomplete="yes" scope="keyword.type.p3">
                <string>bool</string>
                <string>double</string>
                <string>false</string>
                <string>hash</string>
                <string>int</string>
                <string>string</string>
                <string>table</string>
                <string>true</string>
                <string>void</string>
            </keywords>

            <keywords id="P3 Keywords" useforautocomplete="yes" casesensitive="no" scope="keyword.control.p3">
                <string>^case</string>
                <string>^for</string>
                <string>^if</string>
                <string>is</string>
                <string>public</string>
                <string>result</string>
                <string>static</string>
                <string>^switch</string>
                <string>^try</string>
                <string>^while</string>                
            </keywords>

            <keywords id="P3 Base Classes" useforautocomplete="yes" scope="support.class.standard.p3">
               
                <regex>^(\@(CLASS|USE|OPTIONS|BASE|auto\[\w*\]))</regex>

               <!--  <string>@CLASS</string>
                <string>@USE</string>
                <string>@OPTIONS</string>
                <string>@BASE</string> -->
            </keywords>
            
              <keywords id="P3 Classes" useforautocomplete="yes" scope="support.class.standard.p3">
                <string>date</string>
                <string>hash</string>
                <string>math</string>
                <string>string</string>
                <string>table</string>
                <string>void</string>
            </keywords>

            <keywords id="P3 Operators" useforautocomplete="no" scope="language.operator">
                <!-- + - * / = ! < > % -->
                <regex>([\+\-\*\/\=\!\&lt;\&gt;\%])</regex>
            </keywords>

            <keywords id="P3 Numbers" inverted-color="#5d56ff" useforautocomplete="no" scope="constant.numeric.p3">
				<regex>(?&lt;![\w\d\._])((?:(?:(?:[0-9]+\.[0-9]*)|(\.[0-9]+))(?:[eE][+\-]?[0-9]+)?[fFlL]?)|(?:(?:(?:[1-9][0-9]*)|0(?:[1-7][0-7]*)?|(?:0[xX][0-9a-fA-F]+))(?:(?:[uU][lL]?)|(?:[lL][uU]?))?))(?![\w\d\._])</regex>
            </keywords>

            <keywords id="P3 Boolean" inverted-color="#5d56ff" useforautocomplete="yes" scope="constant.numeric.keyword.p3">
                <string>true</string>
                <string>false</string>
            </keywords>

            <keywords id="P3 Variables" casesensitive="yes" useforautocomplete="yes" scope="language.variable.strings.p3">

                <!-- $variable -->
                <regex>(\$[\w\.]{1,512})</regex>
                <!-- <regex>(\$[\w\.]{1,512})</regex> -->
                <!-- ${variable} -->
                <regex>(\$\{[\w\.]{1,512}\}?)</regex>
                
            </keywords>

<!--             <keywords id="P3 Attributes" casesensitive="yes" useforautocomplete="yes" scope="language.variable.strings.p3">
                <regex>\$\w+{1,512}\.(_\w+{1,512})</regex>
            </keywords> -->

            <keywords id="P3 User Method" useforautocomplete="yes" scope="language.function.p3">
				<!-- @methodName -->
                <regex>^\@(?!CLASS|USE|auto\[)(?'name'[\w]{1,512})</regex>
            </keywords>

            <!--
            <keywords id="P3 Call User Method" useforautocomplete="no" scope="language.function.p3">
                <regex>\^(\w+)\[(?'arguments'.*)\]?\z</regex>
            </keywords>
            -->

            <!-- Comments -->
            <!-- # comment -->
            <state id="Comment" type="comment" scope="comment.block.p3">
                <begin><regex>^#</regex></begin>
                <end><regex>[\n\r]</regex></end>
                <import mode="Base" state="EmailAndURLContainerState" keywords-only="yes"/>
            </state>
            
            <!-- code ^rem{ comment }  -->
            <state id="P3 Block Comment" type="comment" scope="comment.line.double-slash.p3">
                <begin><regex>[^(\^rem\{)]\^rem\{</regex><autoend>[^(\^rem\{)]\^rem\{</autoend></begin>
                <end><regex>\}</regex></end>
                <import mode="Base" state="EmailAndURLContainerState" keywords-only="yes"/>
            </state>

            <!-- ^rem{ comment } -->
            <state id="P3 Inline Comment" type="comment" scope="comment.line.double-slash.p3">
                <begin><regex>^\^rem\{</regex><autoend>^\^rem\{</autoend></begin>
                <end><regex>\}</regex></end>
                <import mode="Base" state="EmailAndURLContainerState" keywords-only="yes"/>
            </state>

            <!-- ^rem{"comment"} -->
            <state id="P3 Autodoc Comment" type="comment" scope="comment.block.documentation.p3">
                <begin><regex>\^rem{"</regex></begin>
                <end><regex>"\}</regex></end>
            </state>
            
            <!--
            <state id="P3 TODO" type="comment" scope="comment.bookmark.p3">
                <begin><regex>^#TODO</regex></begin>
                <end><regex>[\n\r]</regex></end>
            </state>
            -->

            <!--
            <state id="P3 RegExp" type="string" scope="string.regex.p3">
                
                <begin><regex>match\[</regex></begin>
                <end><regex>\](\[[ixsmUgnu']*\])?</regex></end>

				<state id="Escaped Characters" scope="string.regex.escaped.p3">
                	<begin><regex>\^</regex></begin>
                	<end><regex>.</regex></end>	
                </state>

            </state>
            -->

            <!--
            <state id="P3 String" type="string" scope="string.double.p3">
                <begin><regex></regex></begin>
                <end><regex></regex></end>
            </state>
            -->

            <state id="Block" type="block" foldable="yes" indent="yes" scope="meta.block.curly">
                <begin><regex>[^\$]{</regex><autoend>}</autoend></begin>
                <end><regex>}</regex></end>
                <import mode="Parser" />
            </state>

        </default>

    </states>

</syntax>
